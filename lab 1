#include <iostream>
#include <string>

using namespace std;

// Класс, представляющий узел списка
class Node {
public:
    string name;
    int age;
    double salary;
    Node* next;

    Node(string n, int a, double s) : name(n), age(a), salary(s), next(nullptr) {}
};

// Класс для работы со списком
class LinkedList {
private:
    Node* head;

public:
    LinkedList() : head(nullptr) {}

    // Деструктор для освобождения памяти
    ~LinkedList() {
        while (head != nullptr) {
            Node* temp = head;
            head = head->next;
            delete temp;
        }
    }

    // Добавление элемента в начало списка
    void addToBeginning(string name, int age, double salary) {
        Node* newNode = new Node(name, age, salary);
        newNode->next = head;
        head = newNode;
    }

    // Добавление элемента в конец списка
    void addToEnd(string name, int age, double salary) {
        Node* newNode = new Node(name, age, salary);
        if (head == nullptr) {
            head = newNode;
        } else {
            Node* temp = head;
            while (temp->next != nullptr) {
                temp = temp->next;
            }
            temp->next = newNode;
        }
    }

    // Добавление элемента после заданного элемента
    void addAfter(string afterName, string name, int age, double salary) {
        Node* temp = head;
        while (temp != nullptr && temp->name != afterName) {
            temp = temp->next;
        }
        if (temp != nullptr) {
            Node* newNode = new Node(name, age, salary);
            newNode->next = temp->next;
            temp->next = newNode;
        } else {
            cout << "Элемент с именем " << afterName << " не найден." << endl;
        }
    }

    // Добавление элемента перед заданным элементом
    void addBefore(string beforeName, string name, int age, double salary) {
        if (head == nullptr) {
            cout << "Список пуст." << endl;
            return;
        }

        if (head->name == beforeName) {
            addToBeginning(name, age, salary);
            return;
        }

        Node* temp = head;
        while (temp->next != nullptr && temp->next->name != beforeName) {
            temp = temp->next;
        }

        if (temp->next != nullptr) {
            Node* newNode = new Node(name, age, salary);
            newNode->next = temp->next;
            temp->next = newNode;
        } else {
            cout << "Элемент с именем " << beforeName << " не найден." << endl;
        }
    }

    // Удаление элемента с заданным именем
    void deleteByName(string name) {
        if (head == nullptr) {
            cout << "Список пуст." << endl;
            return;
        }

        if (head->name == name) {
            Node* temp = head;
            head = head->next;
            delete temp;
            return;
        }

        Node* temp = head;
        while (temp->next != nullptr && temp->next->name != name) {
            temp = temp->next;
        }

        if (temp->next != nullptr) {
            Node* nodeToDelete = temp->next;
            temp->next = temp->next->next;
            delete nodeToDelete;
        } else {
            cout << "Элемент с именем " << name << " не найден." << endl;
        }
    }

    // Вывод списка на экран
    void printList() const {
        Node* temp = head;
        while (temp != nullptr) {
            cout << "Имя: " << temp->name << ", Возраст: " << temp->age << ", Зарплата: " << temp->salary << endl;
            temp = temp->next;
        }
    }
};

// Основная функция
int main() {
    LinkedList list;

    // Добавление элементов в список
    list.addToEnd("Иван", 30, 50000.0);
    list.addToEnd("Мария", 25, 45000.0);
    list.addToBeginning("Петр", 40, 60000.0);

    // Вывод списка
    cout << "Список после добавления элементов:" << endl;
    list.printList();

    // Добавление элемента после заданного
    list.addAfter("Иван", "Алексей", 35, 55000.0);
    cout << "Список после добавления элемента после 'Иван':" << endl;
    list.printList();
    // Добавление элемента перед заданным
    list.addBefore("Мария", "Ольга", 28, 48000.0);
    cout << "Список после добавления элемента перед 'Мария':" << endl;
    list.printList();

    // Удаление элемента
    list.deleteByName("Иван");
    cout << "Список после удаления элемента 'Иван':" << endl;
    list.printList();

    return 0;
}
